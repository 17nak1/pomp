}
X <- matrix(cbind(parus.dat$P,N),ncol=2)
sum((X[1],X[2])^2)
}
subplex(par=c(10,200),fn=rosen2)
#######################################
rosen2 <- function (x) {
N=c(100)
s=0
r <- x[1]
K <- x[2]
for(i in 1:27){
N[i+1]= N[i]+r*N[i]*(1-N[i]/K)
}
X <- matrix(cbind(parus.dat$P,N),ncol=2)
sum((X[1],X[2])^2)
}
#######################################
rosen2 <- function (x) {
N=c(100)
s=0
r <- x[1]
K <- x[2]
for(i in 1:27){
N[i+1]= N[i]+r*N[i]*(1-N[i]/K)
}
X <- matrix(cbind(parus.dat$P,N),ncol=2)
sum((X[1]-X[2])^2)
}
subplex(par=c(10,200),fn=rosen2)
#######################################
rosen2 <- function (x) {
N=c(100)
s=0
r <- x[1]
K <- x[2]
for(i in 1:27){
N[i+1]= N[i]+r*N[i]*(1-N[i]/K)
}
X <- matrix(cbind(parus.dat$P,N),ncol=2)
sum((X[1]-X[2])^2)
}
subplex(par=c(100,200),fn=rosen2)
#######################################
rosen2 <- function (x) {
N=c(100)
s=0
r <- x[1]
K <- x[2]
for(i in 1:27){
N[i+1]= N[i]+r*N[i]*(1-N[i]/K)
}
X <- matrix(cbind(parus.dat$P,N),ncol=2)
dpois(X[1],X[2])
}
subplex(par=c(10,200),fn=rosen2)
warnings()
?objfun
rosen <- function (x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100*(x2-x1*x1)^2+(1-x1)^2
}
subplex(par=c(11,-33),fn=rosen)
rosen2 <- function (x) {
X <- matrix(x,ncol=2)
sum(apply(X,1,rosen))
}
subplex(par=c(-33,11,14,9,0,12),fn=rosen2,control=list(maxit=30000))
subplex(par=c(-3,11,1,1,0,1),fn=rosen2,control=list(maxit=30000))
subplex(par=c(1,1,1,1,1,1),fn=rosen2,control=list(maxit=30000))
rosen2 <- function (x) {
time  <- 1:27
N0    <- 0.1;
parms <- c(r = x[1], K = x[2])
x <- c(N = N0)
NT <- euler(x, time, logist, parms)
-sum(dpois(parus.dat$P,NT[,2],TRUE))
}
subplex(par=c(10,200),fn=rosen2,control=list(maxit=30000))
subplex(par=c(10,200.33333),fn=rosen2,control=list(maxit=30000))
warning()
warnings()
parus.dat <- read.csv(text="
year,P
1960,148
1961,258
1962,185
1963,170
1964,267
1965,239
1966,196
1967,132
1968,167
1969,186
1970,128
1971,227
1972,174
1973,177
1974,137
1975,172
1976,119
1977,226
1978,166
1979,161
1980,199
1981,306
1982,206
1983,350
1984,214
1985,175
1986,211"
)
skel <- Csnippet("
DN = r*N*(1-N/K);
")
dmeas <- Csnippet("
lik = dpois(P,N,give_log);
")
parus <- pomp(data=parus.dat,time="year",t0=1959,
dmeasure =dmeas,
skeleton=vectorfield(skel),statenames="N",paramnames=c("r","K"))
tm <- traj.match(parus,start=c(r=1,K=194,N.0=502),
est=c("r","K"),method="nloptr",
algorithm="NLOPT_LN_SBPLX",transform=TRUE)
t
library(pomp)
library(plyr)
library(reshape2)
library(magrittr)
parus.dat <- read.csv(text="
year,P
1960,148
1961,258
1962,185
1963,170
1964,267
1965,239
1966,196
1967,132
1968,167
1969,186
1970,128
1971,227
1972,174
1973,177
1974,137
1975,172
1976,119
1977,226
1978,166
1979,161
1980,199
1981,306
1982,206
1983,350
1984,214
1985,175
1986,211"
)
skel <- Csnippet("
DN = r*N*(1-N/K);
")
dmeas <- Csnippet("
lik = dpois(P,N,give_log);
")
parus <- pomp(data=parus.dat,time="year",t0=1959,
dmeasure =dmeas,
skeleton=vectorfield(skel),statenames="N",paramnames=c("r","K"))
# logtrans <- Csnippet("
#   Tr = log(r);
#   TK = log(K);
#   Tsigma = log(sigma);
# ")
#
# exptrans <- Csnippet("
#   Tr = exp(r);
#   TK = exp(K);
#   Tsigma = exp(sigma);
# ")
#
# parus <- pomp(parus,toEstimationScale=logtrans,
#               fromEstimationScale=exptrans,
#               paramnames=c("r","K","sigma"))
tm <- traj.match(parus,start=c(r=1,K=194,N.0=502),
library(pomp)
library(plyr)
library(reshape2)
library(magrittr)
parus.dat <- read.csv(text="
year,P
1960,148
1961,258
1962,185
1963,170
1964,267
1965,239
1966,196
1967,132
1968,167
1969,186
1970,128
1971,227
1972,174
1973,177
1974,137
1975,172
1976,119
1977,226
1978,166
1979,161
1980,199
1981,306
1982,206
1983,350
1984,214
1985,175
1986,211"
)
skel <- Csnippet("
DN = r*N*(1-N/K);
")
dmeas <- Csnippet("
lik = dpois(P,N,give_log);
")
parus <- pomp(data=parus.dat,time="year",t0=1959,
dmeasure =dmeas,
skeleton=vectorfield(skel),statenames="N",paramnames=c("r","K"))
# logtrans <- Csnippet("
#   Tr = log(r);
#   TK = log(K);
#   Tsigma = log(sigma);
# ")
#
# exptrans <- Csnippet("
#   Tr = exp(r);
#   TK = exp(K);
#   Tsigma = exp(sigma);
# ")
#
# parus <- pomp(parus,toEstimationScale=logtrans,
#               fromEstimationScale=exptrans,
#               paramnames=c("r","K","sigma"))
tm <- traj.match(parus,start=c(r=1,K=194,N.0=502),
est=c("r","K"),method="subplex",transform=TRUE)
signif(coef(tm),3)
tm <- traj.match(parus,start=c(r=1,K=194,N.0=502),
est=c("r","K","N"),method="subplex",transform=TRUE)
setwd("~/Documents/tests")
#######################
setwd("~/Documents/R/DeterministicSEIR/DeterministicSEIR/DeterministicSEIR_run2")
dataset <- read.csv(file='DeterministicSEIR_run2_job1.csv',header=T)
datasetj <- read.csv(file='file.csv',header=T)
dataset <- dataset[order(-dataset[,"LogLik"]),]
datasetj <- datasetj[order(-datasetj[,"LogLik"]),]
#
require(ggplot2)
plotJS <-  read.csv('sim.csv')
plotJS <-  as.data.frame(plotJS)
x  <- plotJS$time[c(-1,-548)]
y1 <- plotJS$H[c(-1,-548)]
setwd("~/Documents/R/DeterministicSEIR")
rm (list=ls())
source("SetValues.R")
modeltype <- "DeterministicSEIR"
args <- commandArgs(TRUE)
job <- as.numeric(args[1])
# runs <- c(2,3)
runs <- 2
job <- 1
no_cores <- c(1)
no_points <- c(4)
# Create POMP model
source("CreateDataset.R")
source("CreateModel.R")
source("DetermineRunProperties.R")
out <- determine_run_properties(run,modeltype)
source('~/Documents/R/DeterministicSEIR/RunTraj.R', echo=TRUE)
rm(list=ls())
source("SetValues.R")
library(ggplot2)
modeltypes <- c("DeterministicSEIR")
save_plot <- F
samplename <- "TestRun0"
ntraj <- 3
xstart <- 1944
endTime <- 1965
tol <- 1.0e-18
modeltype <- c("DeterministicSEIR")
print(modeltype)
source("RunModel.R")
# file <- paste0("afshin_final.csv")
dir1 <- paste0(modeltype)
file <- file.path(mainDir,dir1,"DeterministicSEIR_run2.csv")
file
file <- file.path(mainDir,dir1,,"2","DeterministicSEIR_run2.csv")
file <- file.path(mainDir,dir1,"2","DeterministicSEIR_run2.csv")
file
source('~/Documents/R/DeterministicSEIR/SampleRuns.R', echo=TRUE)
source('~/Documents/R/DeterministicSEIR/PlotProfile.R', echo=TRUE)
file
file <- file.path(mainDir,mainsubDir,"2","DeterministicSEIR_all2.csv")
source('~/Documents/R/DeterministicSEIR/PlotProfile.R', echo=TRUE)
source('~/Documents/R/DeterministicSEIR/PlotProfile.R', echo=TRUE)
source('~/Documents/R/DeterministicSEIR/PlotProfile.R', echo=TRUE)
source('~/Documents/R/DeterministicSEIR/PlotProfile.R', echo=TRUE)
source('~/Documents/R/DeterministicSEIR/PlotProfile.R', echo=TRUE)
source('~/Documents/R/DeterministicSEIR/PlotProfile.R', echo=TRUE)
source('~/Documents/R/DeterministicSEIR/PlotProfile.R', echo=TRUE)
source('~/Documents/R/DeterministicSEIR/PlotProfile.R', echo=TRUE)
source('~/Documents/R/DeterministicSEIR/CreateDataset.R', echo=TRUE)
head(London_BiData)
?sobolDesign
rm(list=ls())
mainDir <- "~/Documents/R/DeterministicSEIR"
setwd(mainDir)
source("SetValues.R")
modeltypes <- c("DeterministicSEIR")
#runs <- c(seq(2,6))
runs <- c(2)
ind_inc <- 0
ind_mult <- 1
s <- 0.01
no_profile <- 50
no.points <- 100
tol <- 50
span.tol <- 100
for (modeltype in modeltypes) {
for (run in runs) {
setwd(mainDir)
source("DetermineRunProperties.R")
out <- determine_run_properties(run,modeltype)
param <- out$param
lscale <- out$lscale
param_lims <- out$param_lims
flag_bound <- out$flag_bound
rm(out)
print(param)
mainsubDir <- paste0(modeltype,collapse="")
file <- file.path(mainDir,mainsubDir,paste0(modeltype,"_all.csv"))
# file <- "afshin_final.csv"
temp <- read.table(file,header=TRUE,sep=",")
setwd(mainDir)
print(file)
dataset <- read.table(file, header=TRUE,sep=",")
k1 <- ceiling(max(dataset[,"LogLik"]))
dataset <- subset(dataset,subset=LogLik>k1-tol&LogLik<0)
print (nrow(dataset))
if (lscale==1) {
param.array <- exp(seq(log(param_lims[1]),log(param_lims[2]),length=no_profile))
} else {
param.array <- seq(param_lims[1],param_lims[2],length=no_profile)
}
param_profile <- NULL
for (q in 2:(length(param.array))) {
ind1 <- which(dataset[,param]>=param.array[q-1] & dataset[,param]<=param.array[q])
if (length(ind1)>0) {
set1 <- dataset[ind1,]
set1 <- set1 [order ( set1[,"LogLik"],decreasing=TRUE),]
param_profile <- rbind(param_profile,set1[1,])
}
}
print (nrow(param_profile))rm(list=ls())
mainDir <- "~/Documents/R/DeterministicSEIR"
setwd(mainDir)
source("SetValues.R")
modeltypes <- c("DeterministicSEIR")
#runs <- c(seq(2,6))
runs <- c(2)
temp <- param_profile
temp2 <- param_profile
for (q in 1:ceiling(no.points/nrow(temp))) {
if (ind_mult ==1) {
if (ind_inc == -1) {
temp2[,param] <- temp2[,param]/(1+s)
param_profile <- rbind(param_profile,temp2)
} else if (ind_inc == 1) {
temp[,param] <- temp[,param]*(1+s)
param_profile <- rbind(param_profile,temp)
} else {
if (q%%2==1) {
temp2[,param] <- temp2[,param]/(1+s)
param_profile <- rbind(param_profile,temp2)
} else {
temp[,param] <- temp[,param]*(1+s)
param_profile <- rbind(param_profile,temp)
}
}
} else {
if (ind_inc == -1) {
temp2[,param] <- temp2[,param]-s
param_profile <- rbind(param_profile,temp2)
} else if (ind_inc == 1) {
temp[,param] <- temp[,param]+s
param_profile <- rbind(param_profile,temp)
} else {
if (q%%2==1) {
temp2[,param] <- temp2[,param]-s
param_profile <- rbind(param_profile,temp2)
} else {
temp[,param] <- temp[,param]+s
param_profile <- rbind(param_profile,temp)
}
}
}
}
rm(temp,temp2)
param_profile <- param_profile[1:no.points,]
if (flag_bound==1) {
param_profile[which(param_profile[,param]>1-1e-6),param] <-1-1e-6
param_profile[which(param_profile[,param]< 1e-6),param] <- 1e-6
} else if (flag_bound==2) {
param_profile[which(param_profile[,param]< 1e-6),param] <- 1e-6
}
#JS
# param_profile <- cbind(param_profile[- length(param_profile)],t0=matrix(1940,length(param_profile[,1]),1))
# param_profile <- cbind(param_profile,t1=matrix(1944,length(param_profile[,1]),1))
setwd(mainDir)
ParamSetFile <- paste0("ParamSet_",paste0(unname(modeltype),collapse=""),
"_run",run,  ".csv")
write.csv(param_profile,file=ParamSetFile,row.names=FALSE)
if (lscale==0) {
plot(param_profile[,param],param_profile[,"LogLik"], main=ParamSetFile,font.main=1,xlab=param,ylab="LogLik")
} else {
plot(log10(param_profile[,param]),param_profile[,"LogLik"], main=ParamSetFile, font.main=1,ylab=param)
}
}
}
rm(list=ls())
mainDir <- "~/Documents/R/DeterministicSEIR"
setwd(mainDir)
source("SetValues.R")
modeltypes <- c("DeterministicSEIR")
#runs <- c(seq(2,6))
runs <- c(2)
ind_inc <- 0
ind_mult <- 1
s <- 0.01
no_profile <- 50
no.points <- 100
tol <- 50
modeltype <- c("DeterministicSEIR")
setwd(mainDir)
source("DetermineRunProperties.R")
out <- determine_run_properties(run,modeltype)
param <- out$param
lscale <- out$lscale
param_lims <- out$param_lims
flag_bound <- out$flag_bound
rm(out)
print(param)
#runs <- c(seq(2,6))
run <- c(2)
setwd(mainDir)
source("DetermineRunProperties.R")
out <- determine_run_properties(run,modeltype)
param <- out$param
lscale <- out$lscale
param_lims <- out$param_lims
flag_bound <- out$flag_bound
rm(out)
print(param)
mainsubDir <- paste0(modeltype,collapse="")
file <- file.path(mainDir,mainsubDir,paste0(modeltype,"_all.csv"))
# file <- "afshin_final.csv"
temp <- read.table(file,header=TRUE,sep=",")
setwd(mainDir)
print(file)
dataset <- read.table(file, header=TRUE,sep=",")
k1 <- ceiling(max(dataset[,"LogLik"]))
dataset <- subset(dataset,subset=LogLik>k1-tol&LogLik<0)
print (nrow(dataset))
if (lscale==1) {
param.array <- exp(seq(log(param_lims[1]),log(param_lims[2]),length=no_profile))
} else {
param.array <- seq(param_lims[1],param_lims[2],length=no_profile)
}
param_profile <- NULL
length(param.array)
setwd("~/")
setwd("~/Documents/R/DeterministicSEIR")
setwd("~/Git/pomp")
ls()
s <- read.csv("file.csv")
plot(s[2])
plot(s[,2])
plot(s[,3])
plot(s[,4])
plot(s[,1])
s <- read.csv("file.csv")
plot(s$S)
s <- as.data.frame(s)
plot(s$S)
plot(s[,1])
plot(s[,1])
points(S[.1])
points(s[,1])
points(s[,1])
plot(s[,1]~t)
s <- read.csv("file.csv")
plot(s[,1]~t)
plot(s[,2]~s[,1])
plot(s[,1]~s[,2])
s <- read.csv("file.csv")
plot(s[,1]~s[,2])
plot(s[,1]~s[,2],"l")
plot(s[,1]~s[,2],type="l")
plot(s[,2]~s[,1],type="l")
plot(s[,2],type="l")
s <- read.csv("file.csv")
plot(s[,2],type="l")
plot(s[,3],type="l")

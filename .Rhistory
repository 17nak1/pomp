r <- x[1]
K <- x[2]
for(i in 1:27){
N[i+1]= N[i]+r*N[i]*(1-N[i]/K)
}
X <- matrix(cbind(parus.dat$P,N),ncol=2)
sum((X[1],X[2])^2)
}
subplex(par=c(10,200),fn=rosen2)
#######################################
rosen2 <- function (x) {
N=c(100)
s=0
r <- x[1]
K <- x[2]
for(i in 1:27){
N[i+1]= N[i]+r*N[i]*(1-N[i]/K)
}
X <- matrix(cbind(parus.dat$P,N),ncol=2)
sum((X[1],X[2])^2)
}
#######################################
rosen2 <- function (x) {
N=c(100)
s=0
r <- x[1]
K <- x[2]
for(i in 1:27){
N[i+1]= N[i]+r*N[i]*(1-N[i]/K)
}
X <- matrix(cbind(parus.dat$P,N),ncol=2)
sum((X[1]-X[2])^2)
}
subplex(par=c(10,200),fn=rosen2)
#######################################
rosen2 <- function (x) {
N=c(100)
s=0
r <- x[1]
K <- x[2]
for(i in 1:27){
N[i+1]= N[i]+r*N[i]*(1-N[i]/K)
}
X <- matrix(cbind(parus.dat$P,N),ncol=2)
sum((X[1]-X[2])^2)
}
subplex(par=c(100,200),fn=rosen2)
#######################################
rosen2 <- function (x) {
N=c(100)
s=0
r <- x[1]
K <- x[2]
for(i in 1:27){
N[i+1]= N[i]+r*N[i]*(1-N[i]/K)
}
X <- matrix(cbind(parus.dat$P,N),ncol=2)
dpois(X[1],X[2])
}
subplex(par=c(10,200),fn=rosen2)
warnings()
?objfun
rosen <- function (x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100*(x2-x1*x1)^2+(1-x1)^2
}
subplex(par=c(11,-33),fn=rosen)
rosen2 <- function (x) {
X <- matrix(x,ncol=2)
sum(apply(X,1,rosen))
}
subplex(par=c(-33,11,14,9,0,12),fn=rosen2,control=list(maxit=30000))
subplex(par=c(-3,11,1,1,0,1),fn=rosen2,control=list(maxit=30000))
subplex(par=c(1,1,1,1,1,1),fn=rosen2,control=list(maxit=30000))
rosen2 <- function (x) {
time  <- 1:27
N0    <- 0.1;
parms <- c(r = x[1], K = x[2])
x <- c(N = N0)
NT <- euler(x, time, logist, parms)
-sum(dpois(parus.dat$P,NT[,2],TRUE))
}
subplex(par=c(10,200),fn=rosen2,control=list(maxit=30000))
subplex(par=c(10,200.33333),fn=rosen2,control=list(maxit=30000))
warning()
warnings()
parus.dat <- read.csv(text="
year,P
1960,148
1961,258
1962,185
1963,170
1964,267
1965,239
1966,196
1967,132
1968,167
1969,186
1970,128
1971,227
1972,174
1973,177
1974,137
1975,172
1976,119
1977,226
1978,166
1979,161
1980,199
1981,306
1982,206
1983,350
1984,214
1985,175
1986,211"
)
skel <- Csnippet("
DN = r*N*(1-N/K);
")
dmeas <- Csnippet("
lik = dpois(P,N,give_log);
")
parus <- pomp(data=parus.dat,time="year",t0=1959,
dmeasure =dmeas,
skeleton=vectorfield(skel),statenames="N",paramnames=c("r","K"))
tm <- traj.match(parus,start=c(r=1,K=194,N.0=502),
est=c("r","K"),method="nloptr",
algorithm="NLOPT_LN_SBPLX",transform=TRUE)
t
library(pomp)
library(plyr)
library(reshape2)
library(magrittr)
parus.dat <- read.csv(text="
year,P
1960,148
1961,258
1962,185
1963,170
1964,267
1965,239
1966,196
1967,132
1968,167
1969,186
1970,128
1971,227
1972,174
1973,177
1974,137
1975,172
1976,119
1977,226
1978,166
1979,161
1980,199
1981,306
1982,206
1983,350
1984,214
1985,175
1986,211"
)
skel <- Csnippet("
DN = r*N*(1-N/K);
")
dmeas <- Csnippet("
lik = dpois(P,N,give_log);
")
parus <- pomp(data=parus.dat,time="year",t0=1959,
dmeasure =dmeas,
skeleton=vectorfield(skel),statenames="N",paramnames=c("r","K"))
# logtrans <- Csnippet("
#   Tr = log(r);
#   TK = log(K);
#   Tsigma = log(sigma);
# ")
#
# exptrans <- Csnippet("
#   Tr = exp(r);
#   TK = exp(K);
#   Tsigma = exp(sigma);
# ")
#
# parus <- pomp(parus,toEstimationScale=logtrans,
#               fromEstimationScale=exptrans,
#               paramnames=c("r","K","sigma"))
tm <- traj.match(parus,start=c(r=1,K=194,N.0=502),
library(pomp)
library(plyr)
library(reshape2)
library(magrittr)
parus.dat <- read.csv(text="
year,P
1960,148
1961,258
1962,185
1963,170
1964,267
1965,239
1966,196
1967,132
1968,167
1969,186
1970,128
1971,227
1972,174
1973,177
1974,137
1975,172
1976,119
1977,226
1978,166
1979,161
1980,199
1981,306
1982,206
1983,350
1984,214
1985,175
1986,211"
)
skel <- Csnippet("
DN = r*N*(1-N/K);
")
dmeas <- Csnippet("
lik = dpois(P,N,give_log);
")
parus <- pomp(data=parus.dat,time="year",t0=1959,
dmeasure =dmeas,
skeleton=vectorfield(skel),statenames="N",paramnames=c("r","K"))
# logtrans <- Csnippet("
#   Tr = log(r);
#   TK = log(K);
#   Tsigma = log(sigma);
# ")
#
# exptrans <- Csnippet("
#   Tr = exp(r);
#   TK = exp(K);
#   Tsigma = exp(sigma);
# ")
#
# parus <- pomp(parus,toEstimationScale=logtrans,
#               fromEstimationScale=exptrans,
#               paramnames=c("r","K","sigma"))
tm <- traj.match(parus,start=c(r=1,K=194,N.0=502),
est=c("r","K"),method="subplex",transform=TRUE)
signif(coef(tm),3)
tm <- traj.match(parus,start=c(r=1,K=194,N.0=502),
est=c("r","K","N"),method="subplex",transform=TRUE)
setwd("~/Git/pomp")
setwd("~/Documents/R/StochasticSEIR")
source('~/Documents/R/StochasticSEIR/RunMIFsample.R', echo=TRUE)
# setwd("~/Documents/R/DeterministicSEIR/DeterministicSEIR/DeterministicSEIR_run2")
# dataset <- read.csv(file='DeterministicSEIR_run2_job1.csv',header=T)
# datasetj <- read.csv(file='file.csv',header=T)
# dataset <- dataset[order(-dataset[,"LogLik"]),]
# datasetj <- datasetj[order(-datasetj[,"LogLik"]),]
# plot(dataset$LogLik)
# points(datasetj$LogLik,col="red")
# dataset[1,]
# datasetj[1,]
#############################
current_params= c(R0=3.132490e+01 , amplitude=3.883620e-01 , gamma=7.305000e+01 , mu=6.469830e-04 , sigma=4.566000e+01 ,rho= 4.598709e-01 ,psi= 1.462546e-01 ,S_0= 3.399189e-02 ,E_0=2.336327e-04 ,R_0=9.657741e-01,I_0=4.221789e-07)
setwd("~/Git/pomp")
tstart = 1
tend = 548
datasetj <- as.data.frame(read.csv('predmean.csv'))
# datasetj <- datasetj1
# RNGkind("L'Ecuyer-CMRG", normal.kind="Box-Muller");set.seed(1234);
# RNGkind("Knuth-TAOCP-2002");set.seed(1234)
pfilter(m1,params=current_params,Np=1000,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
# datafilter <-  as.data.frame(ss@pred.mean)
# fm=c();for(i in tstart:tend){fm[i]=datafilter[1,i]}
datapredict <- as.data.frame(ss@pred.mean)
# datasetj <- datasetj1
# RNGkind("L'Ecuyer-CMRG", normal.kind="Box-Muller");set.seed(1234);
# RNGkind("Knuth-TAOCP-2002");set.seed(1234)
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
# datafilter <-  as.data.frame(ss@pred.mean)
# fm=c();for(i in tstart:tend){fm[i]=datafilter[1,i]}
datapredict <- as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np=1000IR",col = "red", ylab = "JS")
points(pm[c(tstart+1:tend)], type ="l")
datasetj <- as.data.frame(read.csv('predmean.csv'))
# datasetj <- datasetj1
# RNGkind("L'Ecuyer-CMRG", normal.kind="Box-Muller");set.seed(1234);
# RNGkind("Knuth-TAOCP-2002");set.seed(1234)
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
# datafilter <-  as.data.frame(ss@pred.mean)
# fm=c();for(i in tstart:tend){fm[i]=datafilter[1,i]}
datapredict <- as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np=1000IR",col = "red", ylab = "JS")
points(pm[c(tstart+1:tend)], type ="l")
# datasetj <- datasetj1
# RNGkind("L'Ecuyer-CMRG", normal.kind="Box-Muller");set.seed(1234);
# RNGkind("Knuth-TAOCP-2002");set.seed(1234)
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
# datafilter <-  as.data.frame(ss@pred.mean)
# fm=c();for(i in tstart:tend){fm[i]=datafilter[1,i]}
datapredict <- as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np=1000IR",col = "red", ylab = "JS")
points(pm[c(tstart+1:tend)], type ="l")
plot(pm[c(tstart:tend)], type ="l",main="Np=1000R", col ="blue")
pfilter(m1,params=current_params,Np=1000,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
datapredict <-  as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
points(pm[c(tstart:tend)], type ="l")
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
datapredict <-  as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
points(pm[c(tstart:tend)], type ="l")
datasetj <- as.data.frame(read.csv('predmean.csv'))
# datasetj <- datasetj1
# RNGkind("L'Ecuyer-CMRG", normal.kind="Box-Muller");set.seed(1234);
# RNGkind("Knuth-TAOCP-2002");set.seed(1234)
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
# datafilter <-  as.data.frame(ss@pred.mean)
# fm=c();for(i in tstart:tend){fm[i]=datafilter[1,i]}
datapredict <- as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np=1000IR",col = "red", ylab = "JS")
points(pm[c(tstart+1:tend)], type ="l")
# datasetj <- datasetj1
# RNGkind("L'Ecuyer-CMRG", normal.kind="Box-Muller");set.seed(1234);
# RNGkind("Knuth-TAOCP-2002");set.seed(1234)
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
# datafilter <-  as.data.frame(ss@pred.mean)
# fm=c();for(i in tstart:tend){fm[i]=datafilter[1,i]}
datapredict <- as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np=1000IR",col = "red", ylab = "JS")
points(pm[c(tstart+1:tend)], type ="l")
plot(pm[c(tstart:tend)], type ="l",main="Np=1000R", col ="blue")
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
datapredict <-  as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
points(pm[c(tstart:tend)], type ="l")
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np=1000IR",col = "red", ylab = "JS")
points(pm[c(tstart+1:tend)], type ="l")
plot(pm[c(tstart:tend)], type ="l",main="Np=1000R", col ="blue")
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
datapredict <-  as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
points(pm[c(tstart:tend)], type ="l")
# setwd("~/Documents/R/DeterministicSEIR/DeterministicSEIR/DeterministicSEIR_run2")
# dataset <- read.csv(file='DeterministicSEIR_run2_job1.csv',header=T)
# datasetj <- read.csv(file='file.csv',header=T)
# dataset <- dataset[order(-dataset[,"LogLik"]),]
# datasetj <- datasetj[order(-datasetj[,"LogLik"]),]
# plot(dataset$LogLik)
# points(datasetj$LogLik,col="red")
# dataset[1,]
# datasetj[1,]
#############################
current_params= c(R0=3.132490e+01 , amplitude=3.883620e-01 , gamma=7.305000e+01 , mu=6.469830e-04 , sigma=4.566000e+01 ,rho= 4.598709e-01 ,psi= 1.462546e-01 ,S_0= 3.399189e-02 ,E_0=2.336327e-04 ,R_0=9.657741e-01,I_0=4.221789e-07)
setwd("~/Git/pomp")
tstart = 1
tend = 548
datasetj <- as.data.frame(read.csv('predmean.csv'))
# datasetj <- datasetj1
# RNGkind("L'Ecuyer-CMRG", normal.kind="Box-Muller");set.seed(1234);
# RNGkind("Knuth-TAOCP-2002");set.seed(1234)
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
# datafilter <-  as.data.frame(ss@pred.mean)
# fm=c();for(i in tstart:tend){fm[i]=datafilter[1,i]}
datapredict <- as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np=1000IR",col = "red", ylab = "JS")
points(pm[c(tstart+1:tend)], type ="l")
# datasetj <- datasetj1
# RNGkind("L'Ecuyer-CMRG", normal.kind="Box-Muller");set.seed(1234);
# RNGkind("Knuth-TAOCP-2002");set.seed(1234)
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
# datafilter <-  as.data.frame(ss@pred.mean)
# fm=c();for(i in tstart:tend){fm[i]=datafilter[1,i]}
datapredict <- as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np=1000IR",col = "red", ylab = "JS")
points(pm[c(tstart+1:tend)], type ="l")
# datasetj <- datasetj1
# RNGkind("L'Ecuyer-CMRG", normal.kind="Box-Muller");set.seed(1234);
# RNGkind("Knuth-TAOCP-2002");set.seed(1234)
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
# datafilter <-  as.data.frame(ss@pred.mean)
# fm=c();for(i in tstart:tend){fm[i]=datafilter[1,i]}
datapredict <- as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np=1000IR",col = "red", ylab = "JS")
points(pm[c(tstart+1:tend)], type ="l")
plot(pm[c(tstart:tend)], type ="l",main="Np=1000R", col ="blue")
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
datapredict <-  as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
points(pm[c(tstart:tend)], type ="l")
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np=1000IR",col = "red", ylab = "JS")
points(pm[c(tstart+1:tend)], type ="l")
plot(pm[c(tstart:tend)], type ="l",main="Np=1000R", col ="blue")
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
datapredict <-  as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
points(pm[c(tstart:tend)], type ="l")
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np=1000IR",col = "red", ylab = "JS")
points(pm[c(tstart+1:tend)], type ="l")
plot(pm[c(tstart:tend)], type ="l",main="Np=1000R", col ="blue")
pfilter(m1,params=current_params,Np=100,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
datapredict <-  as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
points(pm[c(tstart:tend)], type ="l")
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np=1000IR",col = "red", ylab = "JS")
points(pm[c(tstart+1:tend)], type ="l")
# setwd("~/Documents/R/DeterministicSEIR/DeterministicSEIR/DeterministicSEIR_run2")
# dataset <- read.csv(file='DeterministicSEIR_run2_job1.csv',header=T)
# datasetj <- read.csv(file='file.csv',header=T)
# dataset <- dataset[order(-dataset[,"LogLik"]),]
# datasetj <- datasetj[order(-datasetj[,"LogLik"]),]
# plot(dataset$LogLik)
# points(datasetj$LogLik,col="red")
# dataset[1,]
# datasetj[1,]
#############################
current_params= c(R0=3.132490e+01 , amplitude=3.883620e-01 , gamma=7.305000e+01 , mu=6.469830e-04 , sigma=4.566000e+01 ,rho= 4.598709e-01 ,psi= 1.462546e-01 ,S_0= 3.399189e-02 ,E_0=2.336327e-04 ,R_0=9.657741e-01,I_0=4.221789e-07)
setwd("~/Git/pomp")
tstart = 1
tend = 548
datasetj <- as.data.frame(read.csv('predmean.csv'))
# datasetj <- datasetj1
# RNGkind("L'Ecuyer-CMRG", normal.kind="Box-Muller");set.seed(1234);
# RNGkind("Knuth-TAOCP-2002");set.seed(1234)
pfilter(m1,params=current_params,Np=5000,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np",col = "red", ylab = "JS")
# datafilter <-  as.data.frame(ss@pred.mean)
# fm=c();for(i in tstart:tend){fm[i]=datafilter[1,i]}
datapredict <- as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
points(pm[c(tstart+1:tend)], type ="l")
# datasetj <- datasetj1
# RNGkind("L'Ecuyer-CMRG", normal.kind="Box-Muller");set.seed(1234);
# RNGkind("Knuth-TAOCP-2002");set.seed(1234)
pfilter(m1,params=current_params,Np=5000,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000) -> ss;ss@loglik
plot(pm[c(tstart:tend)], type ="l",main="Np", col ="blue")
# datafilter <-  as.data.frame(ss@pred.mean)
# fm=c();for(i in tstart:tend){fm[i]=datafilter[1,i]}
datapredict <- as.data.frame(ss@pred.mean)
pm=c();for(i in tstart:tend){pm[i]=datapredict[1,i]}
plot(datasetj$S[c(tstart:tend)], type ="l",main="Np",col = "red", ylab = "JS")
points(pm[c(tstart+1:tend)], type ="l")
points(pm[c(tstart:tend)], type ="l")
library(jsonlite)
help(jsonlite)
mtcars
subset(mtcars, pretty=TRUE)
jsoncars <- toJSON(mtcars, pretty=TRUE)
cat(jsoncars)
fromJSON(jsoncars)
fromJSON('{"city" : "Z\\u00FCrich"}')
toJSON(pi, digits=3)
(pi, digits=3)
toJSON(pi, digits=I(3))
cat(1,2)
cat([1,2])
x <- c(1, 2, pi)
cat(toJSON(x))
toJSON(x)
fromJSON(Math.random())
library(testthat)
test_package("jsonlite")
install.packages("testthat")
library(testthat)
test_package("jsonlite")
fromJSON(paste0('url', 'article_key'))
key <- "&apikey=39c83d5a4acc42be993ee637e2e4ba3d"
#some queries
drones <- fromJSON(paste0("http://openstates.org/api/v1/bills/?q=drone", key))
word <- fromJSON(paste0("http://capitolwords.org/api/1/dates.json?phrase=obamacare", key))
legislators <- fromJSON(paste0("http://congress.api.sunlightfoundation.com/",
"legislators/locate?latitude=42.96&longitude=-108.09", key))
install.packages('curl')
key <- "&apikey=39c83d5a4acc42be993ee637e2e4ba3d"
#some queries
drones <- fromJSON(paste0("http://openstates.org/api/v1/bills/?q=drone", key))
word <- fromJSON(paste0("http://capitolwords.org/api/1/dates.json?phrase=obamacare", key))
legislators <- fromJSON(paste0("http://congress.api.sunlightfoundation.com/",
"legislators/locate?latitude=42.96&longitude=-108.09", key))
replicate(n=no_pf,logLik(pfilter(m1,params=current_params,Np=5000,filter.mean = T,pred.mean=T,pred.var=T,save.states = TRUE, max.fail=3000)))
ct <- v8()
package(v8)
install.packages(v8)
install.packages('v8')
install.packages('V8')
ct <- v8()
ct <- V8()
ct <- new_context()
??v*
}
??v8
?new_context
??new_context
library(V8)
install.packages('V8')
library(V8)
install.packages("V8")
library(libcurl)
install.packages("libcurl")
R.Version()
install.packages("installr") # install installr
library(installr) #load
